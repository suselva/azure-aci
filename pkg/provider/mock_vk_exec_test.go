// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/virtual-kubelet/virtual-kubelet/node/api (interfaces: AttachIO)

// Package provider is a generated GoMock package.
package provider

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/virtual-kubelet/virtual-kubelet/node/api"
)

// MockAttachIO is a mock of AttachIO interface.
type MockAttachIO struct {
	ctrl     *gomock.Controller
	recorder *MockAttachIOMockRecorder
}

// MockAttachIOMockRecorder is the mock recorder for MockAttachIO.
type MockAttachIOMockRecorder struct {
	mock *MockAttachIO
}

// NewMockAttachIO creates a new mock instance.
func NewMockAttachIO(ctrl *gomock.Controller) *MockAttachIO {
	mock := &MockAttachIO{ctrl: ctrl}
	mock.recorder = &MockAttachIOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAttachIO) EXPECT() *MockAttachIOMockRecorder {
	return m.recorder
}

// Resize mocks base method.
func (m *MockAttachIO) Resize() <-chan api.TermSize {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resize")
	ret0, _ := ret[0].(<-chan api.TermSize)
	return ret0
}

// Resize indicates an expected call of Resize.
func (mr *MockAttachIOMockRecorder) Resize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resize", reflect.TypeOf((*MockAttachIO)(nil).Resize))
}

// Stderr mocks base method.
func (m *MockAttachIO) Stderr() io.WriteCloser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stderr")
	ret0, _ := ret[0].(io.WriteCloser)
	return ret0
}

// Stderr indicates an expected call of Stderr.
func (mr *MockAttachIOMockRecorder) Stderr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stderr", reflect.TypeOf((*MockAttachIO)(nil).Stderr))
}

// Stdin mocks base method.
func (m *MockAttachIO) Stdin() io.Reader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stdin")
	ret0, _ := ret[0].(io.Reader)
	return ret0
}

// Stdin indicates an expected call of Stdin.
func (mr *MockAttachIOMockRecorder) Stdin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stdin", reflect.TypeOf((*MockAttachIO)(nil).Stdin))
}

// Stdout mocks base method.
func (m *MockAttachIO) Stdout() io.WriteCloser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stdout")
	ret0, _ := ret[0].(io.WriteCloser)
	return ret0
}

// Stdout indicates an expected call of Stdout.
func (mr *MockAttachIOMockRecorder) Stdout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stdout", reflect.TypeOf((*MockAttachIO)(nil).Stdout))
}

// TTY mocks base method.
func (m *MockAttachIO) TTY() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TTY")
	ret0, _ := ret[0].(bool)
	return ret0
}

// TTY indicates an expected call of TTY.
func (mr *MockAttachIOMockRecorder) TTY() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TTY", reflect.TypeOf((*MockAttachIO)(nil).TTY))
}
